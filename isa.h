#ifndef ISA_H
#define ISA_H

#include <stdint.h>

enum ISA_FLAGS
{
    ISA_FLAG_ZERO       = 1,
    ISA_FLAG_CARRY      = 1 << 1,
    ISA_FAG_SIGN        = 1 << 2,
    ISA_FLAG_OVERFLOW   = 1 << 3,
};


/* 
    uop format:
        0-3: cpu function
		4-15: uop arg
*/
#define UOP(args, function) ((uint16_t)( ((args) << 4) | ((function) & 0xf) ))

enum ISA_FUNCS
{
    /* does nothing but fetch the next instruction */
    ISA_FUNC_NOP    = 0,
    /* mov between internal registers */
    ISA_FUNC_MOV_RR = 1,
    /* mov memory pointed at by addr_latch into data_latch */
    ISA_FUNC_MOV_MR = 3,
    /* mov data_latch into memory pointed at by addr_latch */
    ISA_FUNC_MOV_RM = 4,
    /* alu op between alu_latch and a internal register */
    ISA_FUNC_ALU    = 5,
    /* perform flags test for a jmp */
    ISA_FUNC_FTEST  = 6,
    /* increment/decrement stt register, used for stack operations */
    ISA_FUNC_STT    = 7,

    ISA_FUNC_IN     = 8, 

    ISA_FUNC_OUT    = 9,
    /* increments ip */
    ISA_FUNC_IP     = 15
};

#define NOP UOP(0, ISA_FUNC_NOP)

enum ISA_REGS
{
    ISA_REG_ACCL = 0,
    ISA_REG_ACCH,
    ISA_REG_ACCW,
    ISA_REG_DATA_LATCH,
    ISA_REG_IP,
    ISA_REG_ADDR_LATCH,
    ISA_REG_OP_LATCH,
    ISA_REG_ALU_LATCH,
    ISA_REG_BASE,
    ISA_REG_STT,
    ISA_REG_STB,
    ISA_REG_FLAGS,
    ISA_REG_PREV_IP
};

enum MOV_RR_VALUES
{
    /* value to be used for register is specified in the uop  */
    MOV_RR_VALUE_UOP = 0,
    /* value to be used for register is specified in the src portion of the
    opcode argument latch */
    MOV_RR_VALUE_OP_ARG_DST,
    /* value to be used for register is specified in the dst portion of the
    opcode argument latch */
    MOV_RR_VALUE_OP_ARG_SRC,
};

/* 
    mov_rr:
        4-5:    value to be used as the src register
        6-7:    value to be used as the dst register
        8-11:   uop src register
        12-15:  uop dst register

    The point of allowing the src and dst values to be specified externally is so 2 byte opcodes, which encode
    more complicated addressing modes, work.
*/
#define MOV_RR(dreg, sreg, dval, sval) UOP( ((dreg) << 8) | (((sreg) & 0xf) << 4) | (((dval) & 0x3) << 2) | ((sval) & 0x3), ISA_FUNC_MOV_RR)


enum MOV_MR_WIDTH
{
    MOV_MR_WIDTH_BYTE = 0,
    MOV_MR_WIDTH_WORD = 1
};

/* 
    mov_mr 
        8: read width
*/
#define MOV_MR(width) UOP((width) << 4, ISA_FUNC_MOV_MR)


enum MOV_RM_WIDTH
{
    MOV_RM_WIDTH_BYTE = 0,
    MOV_RM_WIDTH_WORD = 1,
};

/* 
    mov_rm 
        8: write width
*/
#define MOV_RM(width) UOP((width) << 4, ISA_FUNC_MOV_RM)


enum ALU_OPS
{
    ALU_OP_ADD = 0,
    ALU_OP_SUB,
    ALU_OP_MUL,
    ALU_OP_DIV,
    ALU_OP_CMP,
    ALU_OP_AND,
    ALU_OP_OR,
    ALU_OP_XOR,
    ALU_OP_NOT,
    ALU_OP_SHL,
    ALU_OP_SHR,
    ALU_OP_INC,
    ALU_OP_DEC  
};

/*
    alu_op:
        8-11:   register
        12-15:  operation
*/
#define ALU_OP(op, reg) UOP( ((op) << 8) | ((reg) << 4), ISA_FUNC_ALU)

enum ISA_FTESTS
{
    ISA_FTEST_JZ_JE = 0,
    ISA_FTEST_JNZ_JNE,
    ISA_FTEST_JA_JNBE,
    ISA_FTEST_JNA_JBE,
    ISA_FTEST_JAE_JNB_JNC,
    ISA_FTEST_JNAE_JB_JC,
    ISA_FTEST_JL_JNGE,
    ISA_FTEST_JG_JNL,
};

#define FTEST(test) UOP( (test) << 4, ISA_FUNC_FTEST)

enum STT_OPS
{
    /* decrements stt by 2, to perform a push */
    STT_OP_DEC = 0,
    /* increments stt by 2, to perform a pop */
    STT_OP_INC
};

/*
    stt_op: 
        8: operation
*/
#define STT_OP(op) UOP( (op) << 4, ISA_FUNC_STT)


#define OUT UOP(0, ISA_FUNC_OUT)


enum IP_OPS
{
    /* increments ip by 1 */
    IP_OP_INC1 = 0,
    /* increments ip by 2 */
    IP_OP_INC2
}; 

/* 
    ip_op:
        8: operation
*/
#define IP_OP(op) UOP( (op) << 4, ISA_FUNC_IP)

enum ISA_OPCODES
{
    ISA_OPCODE_NOP = 0x00,
    ISA_OPCODE_MOV_ACCL_IMM8,
    ISA_OPCODE_MOV_ACCL_ACCH,
    ISA_OPCODE_MOV_ACCH_IMM8,
    ISA_OPCODE_MOV_ACCH_ACCL,
    ISA_OPCODE_MOV_ACCW_IMM16,
    ISA_OPCODE_MOV_ACCW_BASE,
    ISA_OPCODE_MOV_ACCW_STT,
    ISA_OPCODE_MOV_ACC_STB,
    ISA_OPCODE_MOV_BASE_IMM16,
    ISA_OPCODE_MOV_BASE_ACCW,
    ISA_OPCODE_MOV_BASE_STT,
    ISA_OPCODE_MOV_BASE_STB,
    ISA_OPCODE_MOV_STT_IMM16,
    ISA_OPCODE_MOV_STT_ACCW,
    ISA_OPCODE_MOV_STT_BASE,
    ISA_OPCODE_MOV_STT_STB,
    ISA_OPCODE_MOV_STB_STT,

    ISA_OPCODE_ADD_ACCL_IMM8,
    ISA_OPCODE_ADD_ACCL_ACCH,
    ISA_OPCODE_ADD_ACCH_IMM8,
    ISA_OPCODE_ADD_ACCH_ACCL,
    ISA_OPCODE_ADD_ACCW_IMM16,
    ISA_OPCODE_ADD_ACCW_BASE,
    ISA_OPCODE_ADD_ACCW_STT,
    ISA_OPCODE_ADD_ACCW_STB,
    ISA_OPCODE_ADD_BASE_IMM16,
    ISA_OPCODE_ADD_BASE_ACCW,
    ISA_OPCODE_ADD_BASE_STT,
    ISA_OPCODE_ADD_BASE_STB,
    ISA_OPCODE_ADD_STT_IMM16,
    ISA_OPCODE_ADD_STT_ACCW,
    ISA_OPCODE_ADD_STT_BASE,

    ISA_OPCODE_SUB_ACCL_IMM8,
    ISA_OPCODE_SUB_ACCL_ACCH,
    ISA_OPCODE_SUB_ACCH_IMM8,
    ISA_OPCODE_SUB_ACCH_ACCL,
    ISA_OPCODE_SUB_ACCW_IMM16,
    ISA_OPCODE_SUB_ACCW_BASE,
    ISA_OPCODE_SUB_ACCW_STT,
    ISA_OPCODE_SUB_ACCW_STB,
    ISA_OPCODE_SUB_BASE_IMM16,
    ISA_OPCODE_SUB_BASE_ACCW,
    ISA_OPCODE_SUB_BASE_STT,
    ISA_OPCODE_SUB_BASE_STB,
    ISA_OPCODE_SUB_STT_IMM16,
    ISA_OPCODE_SUB_STT_ACCW,
    ISA_OPCODE_SUB_STT_BASE,

    ISA_OPCODE_MUL_ACCL_IMM8,
    ISA_OPCODE_MUL_ACCL_ACCH,
    ISA_OPCODE_MUL_ACCW_IMM16,
    ISA_OPCODE_MUL_ACCW_BASE,
    ISA_OPCODE_MUL_BASE_IMM16,
    ISA_OPCODE_MUL_BASE_ACCW,

    ISA_OPCODE_DIV_ACCL_IMM8,
    ISA_OPCODE_DIV_ACCL_ACCH,
    ISA_OPCODE_DIV_ACCW_IMM16,
    ISA_OPCODE_DIV_ACCW_BASE,
    ISA_OPCODE_DIV_BASE_IMM16,
    ISA_OPCODE_DIV_BASE_ACCW,

    ISA_OPCODE_CMP_ACCL_IMM8,
    ISA_OPCODE_CMP_ACCL_ACCH,
    ISA_OPCODE_CMP_ACCH_IMM8,
    ISA_OPCODE_CMP_ACCH_ACCL,
    ISA_OPCODE_CMP_ACCW_IMM16,
    ISA_OPCODE_CMP_ACCW_BASE,
    ISA_OPCODE_CMP_BASE_IMM16,
    ISA_OPCODE_CMP_BASE_ACCW,

    ISA_OPCODE_AND_ACCL_IMM8,
    ISA_OPCODE_AND_ACCL_ACCH,
    ISA_OPCODE_AND_ACCH_IMM8,
    ISA_OPCODE_AND_ACCH_ACCL,
    ISA_OPCODE_AND_ACCW_IMM16,
    ISA_OPCODE_AND_ACCW_BASE,
    ISA_OPCODE_AND_BASE_IMM16,
    ISA_OPCODE_AND_BASE_ACCW,

    ISA_OPCODE_OR_ACCL_IMM8,
    ISA_OPCODE_OR_ACCL_ACCH,
    ISA_OPCODE_OR_ACCH_IMM8,
    ISA_OPCODE_OR_ACCH_ACCL,
    ISA_OPCODE_OR_ACCW_IMM16,
    ISA_OPCODE_OR_ACCW_BASE,
    ISA_OPCODE_OR_BASE_IMM16,
    ISA_OPCODE_OR_BASE_ACCW,

    ISA_OPCODE_XOR_ACCL_IMM8,
    ISA_OPCODE_XOR_ACCL_ACCH,
    ISA_OPCODE_XOR_ACCH_IMM8,
    ISA_OPCODE_XOR_ACCH_ACCL,
    ISA_OPCODE_XOR_ACCW_IMM16,
    ISA_OPCODE_XOR_ACCW_BASE,
    ISA_OPCODE_XOR_BASE_IMM16,
    ISA_OPCODE_XOR_BASE_ACCW,

    ISA_OPCODE_NOT_ACCL,
    ISA_OPCODE_NOT_ACCH,
    ISA_OPCODE_NOT_ACCW,
    ISA_OPCODE_NOT_BASE,

    ISA_OPCODE_SHL_ACCL_IMM8,
    ISA_OPCODE_SHL_ACCL_ACCH,
    ISA_OPCODE_SHL_ACCH_IMM8,
    ISA_OPCODE_SHL_ACCH_ACCL,
    ISA_OPCODE_SHL_ACCW_IMM16,
    ISA_OPCODE_SHL_ACCW_BASE,
    ISA_OPCODE_SHL_BASE_IMM16,
    ISA_OPCODE_SHL_BASE_ACCW,

    ISA_OPCODE_SHR_ACCL_IMM8,
    ISA_OPCODE_SHR_ACCL_ACCH,
    ISA_OPCODE_SHR_ACCH_IMM8,
    ISA_OPCODE_SHR_ACCH_ACCL,
    ISA_OPCODE_SHR_ACCW_IMM16,
    ISA_OPCODE_SHR_ACCW_BASE,
    ISA_OPCODE_SHR_BASE_IMM16,
    ISA_OPCODE_SHR_BASE_ACCW,

    ISA_OPCODE_INC_ACCL,
    ISA_OPCODE_INC_ACCH,
    ISA_OPCODE_INC_ACCW,
    ISA_OPCODE_INC_BASE,

    ISA_OPCODE_DEC_ACCL,
    ISA_OPCODE_DEC_ACCH,
    ISA_OPCODE_DEC_ACCW,
    ISA_OPCODE_DEC_BASE,

    ISA_OPCODE_JMP_IMM16,
    ISA_OPCODE_JZ_JE_IMM16,
    ISA_OPCODE_JNZ_JNE_IMM16,
    ISA_OPCODE_JA_JNBE_IMM16,
    ISA_OPCODE_JNA_JBE_IMM16,
    ISA_OPCODE_JAE_JNB_JNC_IMM16,
    ISA_OPCODE_JNAE_JB_JC_IMM16,
    ISA_OPCODE_JL_JNGE_IMM16,
    ISA_OPCODE_JG_JNLE_IMM16,

    ISA_OPCODE_CALL_IMM16 = 0x87,
    ISA_OPCODE_RET,

    ISA_OPCODE_PUSH_IMM8, 
    ISA_OPCODE_PUSH_IMM16,
    ISA_OPCODE_PUSH_ACCL,
    ISA_OPCODE_PUSH_ACCH,
    ISA_OPCODE_PUSH_ACCW,
    ISA_OPCODE_PUSH_BASE,
    ISA_OPCODE_PUSH_STT,
    ISA_OPCODE_PUSH_STB,

    ISA_OPCODE_POP_ACCL,
    ISA_OPCODE_POP_ACCH,
    ISA_OPCODE_POP_ACCW,
    ISA_OPCODE_POP_BASE,
    ISA_OPCODE_POP_STT,
    ISA_OPCODE_POP_STB,

    ISA_OPCODE_IN_ACCL_IMM16,
    ISA_OPCODE_IN_ACCL_BASE,
    ISA_OPCODE_IN_ACCH_IMM16,
    ISA_OPCODE_IN_ACCH_BASE,
    ISA_OPCODE_IN_ACCW_IMM16,
    ISA_OPCODE_IN_ACCW_BASE,

    ISA_OPCODE_OUT_IMM16_ACCL,
    ISA_OPCODE_OUT_BASE_ACCL,
    ISA_OPCODE_OUT_IMM16_ACCH,
    ISA_OPCODE_OUT_BASE_ACCH,
    ISA_OPCODE_OUT_IMM16_ACCW,
    ISA_OPCODE_OUT_BASE_ACCW,

    ISA_OPCODE_MOV_DST_I_IMM16 = 0xc0,
    ISA_OPCODE_MOV_DST_I_SRC,
    ISA_OPCODE_MOV_DST_I_SRC_IMM16,
    ISA_OPCODE_MOV_I_IMM16_SRC16,
    ISA_OPCODE_MOV_I_DST_SRC16,
    ISA_OPCODE_MOV_I_DST_IMM16_SRC16,
    ISA_OPCODE_MOV_I_IMM16_SRC8,
    ISA_OPCODE_MOV_I_DST_SRC8,
    ISA_OPCODE_MOV_I_DST_IMM16_SRC8,

    ISA_OPCODE_LAST
};


static uint16_t uop_rom[][16] = {
    [ISA_OPCODE_NOP] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        IP_OP   (IP_OP_INC1),
        MOV_RR  (ISA_REG_OP_LATCH, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_ACCL_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ACCL, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_MOV_ACCL_ACCH] = {
        MOV_RR  (ISA_REG_ACCL, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_ACCH_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ACCH, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_MOV_ACCH_ACCL] = {
        MOV_RR  (ISA_REG_ACCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_ACCW_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_MOV_ACCW_BASE] = {
        MOV_RR  (ISA_REG_ACCW, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_ACCW_STT] = {
        MOV_RR  (ISA_REG_ACCW, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_ACC_STB] = {
        MOV_RR  (ISA_REG_ACCW, ISA_REG_STB, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_BASE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_BASE, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_MOV_BASE_ACCW] = {
        MOV_RR  (ISA_REG_BASE, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_BASE_STT] = {
        MOV_RR  (ISA_REG_BASE, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_BASE_STB] = {
        MOV_RR  (ISA_REG_BASE, ISA_REG_STB, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_STT_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_STT, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_MOV_STT_ACCW] = {
        MOV_RR  (ISA_REG_STT, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_STT_BASE] = {
        MOV_RR  (ISA_REG_STT, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_STT_STB] = {
        MOV_RR  (ISA_REG_STT, ISA_REG_STB, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_MOV_STB_STT] = {
        MOV_RR  (ISA_REG_STB, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },


    [ISA_OPCODE_ADD_ACCL_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ACCL, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_ADD_ACCL_ACCH] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_ACCH),
        MOV_RR  (ISA_REG_ACCL, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_ACCH_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ACCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_ADD_ACCH_ACCL] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_ACCL),
        MOV_RR  (ISA_REG_ACCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_ACCW_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_ADD_ACCW_BASE] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_BASE),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_ACCW_STT] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_STT),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_ACCW_STB] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_STB),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_BASE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_ADD_BASE_ACCW] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_ACCW),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_BASE_STT] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_STT),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_BASE_STB] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_STB),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_STT_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_STT, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_ADD_STT_ACCW] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_ACCW),
        MOV_RR  (ISA_REG_STT, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_ADD_STT_BASE] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_ADD, ISA_REG_BASE),
        MOV_RR  (ISA_REG_STT, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },


    [ISA_OPCODE_SUB_ACCL_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_MR_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ACCL, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_SUB_ACCL_ACCH] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_ACCH),
        MOV_RR  (ISA_REG_ACCL, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_ACCH_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ACCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_SUB_ACCH_ACCL] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_ACCL),
        MOV_RR  (ISA_REG_ACCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_ACCW_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_SUB_ACCW_BASE] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_BASE),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_ACCW_STT] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_STT),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_ACCW_STB] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_STB),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_BASE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_SUB_BASE_ACCW] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_ACCW),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_BASE_STT] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_STT),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_BASE_STB] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_STB),
        MOV_RR  (ISA_REG_BASE, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_STT_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_STT, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_SUB_STT_ACCW] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_ACCW),
        MOV_RR  (ISA_REG_STT, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_SUB_STT_BASE] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_SUB, ISA_REG_BASE),
        MOV_RR  (ISA_REG_STT, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },


    [ISA_OPCODE_MUL_ACCL_IMM8] = {},
    [ISA_OPCODE_MUL_ACCL_ACCH] = {},
    [ISA_OPCODE_MUL_ACCW_IMM16] = {},
    [ISA_OPCODE_MUL_ACCW_BASE] = {},
    [ISA_OPCODE_MUL_BASE_IMM16] = {},
    [ISA_OPCODE_MUL_BASE_ACCW] = {},


    [ISA_OPCODE_DIV_ACCL_IMM8] = {},
    [ISA_OPCODE_DIV_ACCL_ACCH] = {},
    [ISA_OPCODE_DIV_ACCW_IMM16] = {},
    [ISA_OPCODE_DIV_ACCW_BASE] = {},
    [ISA_OPCODE_DIV_BASE_IMM16] = {},
    [ISA_OPCODE_DIV_BASE_ACCW] = {},

    [ISA_OPCODE_CMP_ACCL_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_DATA_LATCH),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_CMP_ACCL_ACCH] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_ACCH),
    },
    [ISA_OPCODE_CMP_ACCH_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_DATA_LATCH),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_CMP_ACCH_ACCL] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_ACCL)
    },
    [ISA_OPCODE_CMP_ACCW_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_DATA_LATCH),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_CMP_ACCW_BASE] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_BASE)
    },
    [ISA_OPCODE_CMP_BASE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_DATA_LATCH),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_CMP_BASE_ACCW] = {
        MOV_RR  (ISA_REG_ALU_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        ALU_OP  (ALU_OP_CMP, ISA_REG_ACCW)
    },

    [ISA_OPCODE_JMP_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JZ_JE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JZ_JE),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JNZ_JNE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JNZ_JNE),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JA_JNBE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JA_JNBE),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JNA_JBE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JNA_JBE),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JAE_JNB_JNC_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JAE_JNB_JNC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JNAE_JB_JC_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JNAE_JB_JC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JL_JNGE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JL_JNGE),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_JG_JNLE_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        IP_OP   (IP_OP_INC2),
        FTEST   (ISA_FTEST_JG_JNL),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
    },

    [ISA_OPCODE_CALL_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_PREV_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_RET] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_IP, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC)
    },


    [ISA_OPCODE_PUSH_IMM8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_BYTE),
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD),
        IP_OP   (IP_OP_INC1)
    },
    [ISA_OPCODE_PUSH_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD),
        IP_OP   (IP_OP_INC2)
    },
    [ISA_OPCODE_PUSH_ACCL] = {
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_PUSH_ACCH] = {
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_ACCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_PUSH_ACCW] = {
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_ACCW, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_PUSH_BASE] = {
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_PUSH_STT] = {
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_PUSH_STB] = {
        STT_OP  (STT_OP_DEC),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, ISA_REG_STB, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },

    [ISA_OPCODE_POP_ACCL] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ACCL, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_POP_ACCH] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ACCH, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_POP_ACCW] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_ACCW, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_POP_BASE] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_BASE, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_POP_STT] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_STT, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },
    [ISA_OPCODE_POP_STB] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_STT, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        STT_OP  (STT_OP_INC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (ISA_REG_STB, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP)
    },

    [ISA_OPCODE_IN_ACCL_IMM16] = {

    },
    [ISA_OPCODE_IN_ACCL_BASE] = {

    },
    [ISA_OPCODE_IN_ACCH_IMM16] = {

    },
    [ISA_OPCODE_IN_ACCH_BASE] = {

    },
    [ISA_OPCODE_IN_ACCW_IMM16] = {

    },
    [ISA_OPCODE_IN_ACCW_BASE] = {

    },

    [ISA_OPCODE_OUT_IMM16_ACCL] = {
        
    },
    [ISA_OPCODE_OUT_BASE_ACCL] = {
        MOV_RR(ISA_REG_ADDR_LATCH, ISA_REG_BASE, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR(ISA_REG_DATA_LATCH, ISA_REG_ACCL, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        OUT
    },
    [ISA_OPCODE_OUT_IMM16_ACCH] = {

    },
    [ISA_OPCODE_OUT_BASE_ACCH] = {

    },
    [ISA_OPCODE_OUT_IMM16_ACCW] = {

    },
    [ISA_OPCODE_OUT_BASE_ACCW] = {

    },

    [ISA_OPCODE_MOV_DST_I_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (0, ISA_REG_DATA_LATCH, MOV_RR_VALUE_OP_ARG_DST, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_DST_I_SRC] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        MOV_RR  (0, ISA_REG_DATA_LATCH, MOV_RR_VALUE_OP_ARG_DST, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_DST_I_SRC_IMM16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_ALU_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),        
        MOV_RR  (0, ISA_REG_DATA_LATCH, MOV_RR_VALUE_OP_ARG_DST, MOV_RR_VALUE_UOP),
    },
    [ISA_OPCODE_MOV_I_IMM16_SRC16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_MR  (MOV_MR_WIDTH_WORD)
    },
    [ISA_OPCODE_MOV_I_DST_SRC16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_DST),
        MOV_RR  (ISA_REG_DATA_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_MR  (MOV_MR_WIDTH_WORD),
    },
    [ISA_OPCODE_MOV_I_DST_IMM16_SRC16] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_ALU_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_DST),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_MR  (MOV_MR_WIDTH_WORD),
    },
    [ISA_OPCODE_MOV_I_IMM16_SRC8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_DATA_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_MR  (MOV_MR_WIDTH_BYTE)
    },
    [ISA_OPCODE_MOV_I_DST_SRC8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_DST),
        MOV_RR  (ISA_REG_DATA_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_MR  (MOV_MR_WIDTH_BYTE),
    },
    [ISA_OPCODE_MOV_I_DST_IMM16_SRC8] = {
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_IP, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RM  (MOV_RM_WIDTH_WORD),
        IP_OP   (IP_OP_INC2),
        MOV_RR  (ISA_REG_ALU_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_DST),
        ALU_OP  (ALU_OP_ADD, ISA_REG_DATA_LATCH),
        MOV_RR  (ISA_REG_ADDR_LATCH, ISA_REG_ALU_LATCH, MOV_RR_VALUE_UOP, MOV_RR_VALUE_UOP),
        MOV_RR  (ISA_REG_DATA_LATCH, 0, MOV_RR_VALUE_UOP, MOV_RR_VALUE_OP_ARG_SRC),
        MOV_MR  (MOV_MR_WIDTH_BYTE),
    }
};

#endif