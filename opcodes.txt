reg indexes:
	0: accl
	1: acch
	2: accw
	3: data_latch
	4: ip
	5: addr_latch
	6: opcode_latch
	7: alu_latch
	8: base
	9: sp
	a: bp
	b: flags

alu op indexes:
	0: add
	1: sub
	2: mul
	3: div
	4: cmp
	5: and
	6: or
	7: xor
	8: not
	9: shl
	a: shr
	b: inc
	c: dec

flags:
	1 		- zero
	1 << 1 	- negative 

uops:
	format:
		0-3: cpu function
		4-7: unused
		8-15: opcode arg

	0x0000: (nop) next instruction
	=====================================

	0x0i10: inc ip
		i = increment value

		step 0: clock ip
	=====================================

	0xds01: mov reg, reg
		d = destination register
		s = source register

		step 0: clock reg
	=====================================

	0x0w03: mov [addr_latch], data_latch
		w = read width
			0 = byte
			1 = word

		TODO
	=====================================

	0x0w04: mov data_latch, [addr_latch]
		w = read width
			0 = byte
			1 = word

		step 0: assert output enable and enable memory input buffer
		step 1: assert memory clock and enable writes to data_latch (low byte will be selected)
		step 2: assert data_latch clock, enable addr_latch writes

		if w = 1

		step 3: deassert memory and data_latch clock, select data_latch high byte, assert data_latch clock
		step 4: assert memory clock
		step 5: assert data_latch clock
	=====================================

	0xor15: op alu, register
		r = register
		o = operation

		step 0: clock alu
	=====================================

	0xff06: branch
		ff = flags
			0-6 = flags to test
			7 = when 0, all flags must be present. When 1, at least one must be present

	=====================================




opcodes:
	0x00: nop (fetch instruction)
		0x5401 0x0004 0x0110 0x6301


	0x01: mov accl, immm8
		0x5401 0x0004 0x0301 0x0110

	mov accl, byte [base]
		0x5801 0x0004 0x0301

	mov accl, byte [sp]
		0x5901 0x0004 0x0301

	mov accl, byte [bp]
		0x5a01 0x0004 0x0301

	mov accl, byte [base + imm16]
		0x5401 0x0104 0x7801 0x0305 0x5701 0x0004 0x0301 0x0210

	mov accl, byte [sp + imm16]
		0x5401 0x0104 0x7901 0x0305 0x5701 0x0004 0x0301 0x0210

	mov accl, byte [bp + imm16]
		0x5401 0x0104 0x7a01 0x0305 0x5701 0x0004 0x0301 0x0210


	mov acch, immm8
		0x5401 0x0004 0x1301 0x0110

	mov acch, byte [base]
		0x5801 0x0004 0x1301

	mov acch, byte [sp]
		0x5901 0x0004 0x1301

	mov acch, byte [bp]
		0x5a01 0x0004 0x1301

	mov acch, byte [base + imm16]
		0x5401 0x0104 0x7801 0x0305 0x5701 0x0004 0x1301 0x0210

	mov acch, byte [sp + imm16]
		0x5401 0x0104 0x7901 0x0305 0x5701 0x0004 0x1301 0x0210

	mov acch, byte [bp + imm16]
		0x5401 0x0104 0x7a01 0x0305 0x5701 0x0004 0x1301 0x0210


	mov acc, imm16
		0x5401 0x0104 0x2301 0x0210
	
	mov acc, word [base]
		0x5801 0x0104 0x2301

	mov acc, word [sp]
		0x5901 0x0104 0x2301

	mov acc, word [bp]
		0x5a01 0x0104 0x2301
	
	mov acc, word [base + imm16]
		0x5401 0x0104 0x2301 0x0210

	mov acc, word [sp + imm16]
		0x5401 0x0104 0x2301 0x0210

	mov acc, word [bp + imm16]
		0x5401 0x0104 0x2301 0x0210




	mov base, imm16
		0x5401 0x0104 0x8301 0x0210

	mov base, word [base]
		0x5801 0x0104 0x8301

	mov base, word [base + imm16]
		0x5401 0x0104 0x7801 0x0305 0x5701 0x0104 0x8301 0x0210

	



	0x02: mov acch, immm8
		0x5411 0x0034 0x1311 0x0010

	0x03: mov acc, imm16
		0x5401 0x0104 0x2301 0x4501 0x0010

	0x04: jmp imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x4311



	0x05: add accl, imm8
		0x7011 0x5411 0x0034 0x0315 0x0711 0x0010

	0x06: add accl, imm8
		0x7111 0x5411 0x0034 0x0315 0x0711 0x0010

	0x07: add acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711


	TODO:
	0x08: sub accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711
	TODO:
	0x09: sub accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711
	TODO:
	0x0a: sub acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711


	TODO:
	0x0b: mul accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711

	TODO:
	0x0c: mul accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711

	TODO:
	0x0d: mul acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711


	TODO:	
	0x0e: div accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711

	TODO:
	0x0f: div accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711

	TODO:
	0x10: div acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711

	
	TODO:
	0x11: neg accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711

	TODO:
	0x12: neg accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711

	TODO:
	0x13: neg acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711

	
	0x14: cmp accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	0x15: cmp acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	0x16: cmp acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x17: and accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x18: and acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x19: and acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x1a: or accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x1b: or acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x1c: or acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x1d: xor accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x1e: xor acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010	

	TODO:
	0x1f: xor acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010

	
	TODO:
	0x20: not accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x21: not acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x22: not acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x23: shl accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x24: shl acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x25: shl acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x26: shr accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x27: shr acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x28: shr acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010
	

	0x29: jmp imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x4311

	0x2a: jz/je imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x0010 0x0106 0x4311

	0x2b: jg imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x0010 0x0006 0x4311

	0x2c: jge imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x0010 0x0006 0x4311
	
	0x2d: jb/jn



	accumulator: 132 instructions