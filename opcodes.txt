reg indexes:
	0: accl
	1: acch
	2: accw
	3: data_latch
	4: ip
	5: addr_latch
	6: opcode_latch
	7: alu_latch
	8: base
	9: stt
	a: stb
	b: flags

alu op indexes:
	0: add
	1: sub
	2: mul
	3: div
	4: cmp
	5: and
	6: or
	7: xor
	8: not
	9: shl
	a: shr
	b: inc
	c: dec

flags:
	1 		- zero
	1 << 1 	- negative 

uops:
	format:
		0-3: cpu function
		4-7: unused
		8-15: opcode arg

	0x0000: (nop) next instruction
	=====================================

	0xds01: mov reg, reg
		d = destination register
		s = source register

		step 0: clock reg
	=====================================

	0x0w03: mov [addr_latch], data_latch
		w = read width
			0 = byte
			1 = word

		TODO
	=====================================

	0x0w04: mov data_latch, [addr_latch]
		w = read width
			0 = byte
			1 = word

		step 0: assert output enable and enable memory input buffer
		step 1: assert memory clock and enable writes to data_latch (low byte will be selected)
		step 2: assert data_latch clock, enable addr_latch writes

		if w = 1

		step 3: deassert memory and data_latch clock, select data_latch high byte, assert data_latch clock
		step 4: assert memory clock
		step 5: assert data_latch clock
	=====================================

	0xor15: op alu, register
		r = register
		o = operation

		step 0: clock alu
	=====================================

	0xff06: branch
		ff = flags
			0-6 = flags to test
			7 = when 0, all flags must be present. When 1, at least one must be present

	=====================================

	0x0i0f: inc ip
		i = increment value
			0 = increment by one
			1 = increment by two

		step 0: clock ip
	=====================================





1 byte opcodes (0x00 to 0xbf): 

	nop:
		0x00: nop (fetch instruction)
			0x5401 0x0004 0x000f 0x6301

	mov:
		0x01: mov accl, immm8
			0x5401 0x0004 0x0301 0x000f
		0x02: mov accl, acch
			0x0101
		
		0x03: mov acch, immm8
			0x5401 0x0004 0x1301 0x000f
		0x04: mov acch, accl
			0x1001

		0x05: mov acc, imm16
			0x5401 0x0104 0x2301 0x010f
		0x06: mov acc, base
			0x2801
		0x07: mov acc, stt
			0x2901
		0x08: mov acc, stb
			0x2a01

		0x09: mov base, imm16
			0x5401 0x0104 0x8301 0x010f
		0x0a: mov base, acc
			0x8201
		0x0b: mov base, stt
			0x8901
		0x0c: mov base, stb
			0x8a01

		0x0d: mov stt, imm16
			0x5401 0x0104 0x9301 0x010f
		0x0e: mov stt, acc
			0x9201
		0x0f: mov stt, base
			0x9801
		0x10: mov stt, stb
			0x9a01

		0x11: mov stb, stt
			0xa901

	add:
		0x12: add accl, imm8
		0x13: add accl, acch

		0x14: add acch, imm8
		0x15: add acch, accl

		0x16: add acc, imm16
			0x5401 0x0104 0x7201 0x0305 0x2701 0x010f
		0x17: add acc, base
		0x18: add acc, stt
		0x19: add acc, stb

		0x1a: add base, imm16
			0x5401 0x0104 0x7801 0x0305 0x8701 0x010f
		0x1b: add base, acc
		0x1c: add base, stt
		0x1d: add base, stb

		0x1e: add stt, imm16
		0x1f: add stt, acc
		0x20: add stt, base

	sub:
		0x21: sub accl, imm8
		0x22: sub accl, acch

		0x23: sub acch, imm8
		0x24: sub acch, accl

		0x25: sub acc, imm16
		0x26: sub acc, base
		0x27: sub acc, stt
		0x28: sub acc, stb

		0x29: sub base, imm16
		0x2a: sub base, stt
		0x2b: sub base, stb

		0x2c: sub stt, imm16
		0x2d: sub stt, acc
		0x2e: sub stt, base

	mul:
		0x2f: mul accl, imm8
		0x30: mul accl, acch

		0x31: mul acc, imm16
		0x32: mul acc, base

		0x33: mul base, imm16
		0x34: mul base, acc

	div:
		0x35: div accl, imm8
		0x36: div accl, acch

		0x37: div acc, imm16
		0x38: div acc, base

		0x39: div base, imm16
		0x3a: div base, acc

	cmp:
		0x3b: cmp accl, imm8
			0x5401 0x0004 0x7001 0x4305 0x000f
		0x3c: cmp accl, acch
			0x7001 0x4105 0x000f

		0x3d: cmp acch, imm8
			0x5401 0x0004 0x7101 0x4305 0x000f
		0x3e: cmp acch, accl
			0x7101 0x4005 0x000f
			
		0x3f: cmp acc, imm16
			0x5401 0x0104 0x7201 0x4305 0x010f
		0x40: cmp acc, base
			0x7201 0x4805 0x000f

		0x41: cmp base, imm16
			0x5401 0x0104 0x7801 0x4305 0x010f
		0x42: cmp base, acc
			0x7801 0x4205 0x000f

	and:
		0x43: and accl, imm8
		0x44: and accl, acch

		0x45: and acch, imm8
		0x46: and acch, accl

		0x47: and acc, imm16
		0x48: and acc, base

		0x49: and base, imm16
		0x4a: and base, acc

	or:
		0x4b: or accl, imm8
		0x4c: or accl, acch

		0x4d: or acch, imm8
		0x4e: or acch, accl

		0x4f: or acc, imm16
		0x50: or acc, base

		0x51: or base, imm16
		0x52: or base, acc

	xor:
		0x53: xor accl, imm8
		0x54: xor accl, acch

		0x55: xor acch, imm8
		0x56: xor acch, accl

		0x57: xor acc, imm16
		0x58: xor acc, base

		0x59: xor base, imm16
		0x5a: xor base, acc

	not:
		0x5b: not accl

		0x5c: not acch

		0x5d: not acc

		0x5e: not base

	shl:
		0x5f: shl accl, imm8
		0x60: shl accl, acch

		0x61: shl acch, imm8
		0x62: shl acch, accl

		0x63: shl acc, imm16
		0x64: shl acc, base

		0x65: shl base, imm16
		0x66: shl base, acc

	shr:
		0x67: shr accl, imm8
		0x68: shr accl, acch

		0x69: shr acch, imm8
		0x6a: shr acch, accl

		0x6b: shr acc, imm16
		0x6c: shr acc, base

		0x6d: shr base, imm16
		0x6e: shr base, acc

	inc:
		0x6f: inc accl
		
		0x70: inc acch

		0x71: inc acc

		0x72: inc base

	dec:
		0x73: dec accl

		0x74: dec acch

		0x75: dec acc

		0x76: dec base

	jumps:
		0x77: jmp imm16
			0x5401 0x0104 0x4301

		0x78: jz imm16
			0x5401 0x0104 0x010f 0x0106 0x4301
		0x79: jnz imm16

		call imm16

		ret

	push:
		push imm8

		push imm16

		push accl

		push acch

		push acc

		push base

		push stt

		push stb

	pop:
		pop accl

		pop acch

		pop acc

		pop base

		pop stt

		pop stb


2 byte opcodes (0xc0 to 0xff):
	("addr" referenced in the opcodes are registers)
		d = dst register
		s = addr register
	mov:
		0xc0 0xd0: mov dst, [imm16]
		0xc1 0xds: mov dst, [addr]
		0xc2 0xds: mov dst, [addr + imm16]

		0xc3 0x0s: mov [imm16], src
		0xc4 0xds: mov [addr], src 
		0xc5 0xds: mov [addr + imm16], src

	add:
		0xc6 0xd0: add dst, [imm16]
		0xc7 0xds: add dst, [addr]
		0xc8 0xds: add dst, [addr + imm16]

	sub:
		0xc9 0xd0: sub dst, [imm16]
		0xca 0xds: sub dst, [addr]
		0xcb 0xds: sub dst, [addr + imm16]

	mul:
		0xcc 0xd0: mul dst, [imm16]
		0xcd 0xds: mul dst, [addr]
		0xce 0xds: mul dst, [addr + imm16]

	div:
		0xcf 0xd0: div dst, [imm16]
		0xd0 0xds: div dst, [addr]
		0xd1 0xds: div dst, [addr + imm16]

	cmp:
		0xd2 0xd0: cmp dst, [imm16]
		0xd3 0xds: cmp dst, [addr]
		0xd4 0xds: cmp dst, [addr + imm16]

	and:
		0xd5 0xd0: and dst, [imm16]
		0xd6 0xds: and dst, [addr]
		0xd7 0xds: and dst, [addr + imm16]

	or:
		0xd8 0xd0: or dst, [imm16]
		0xd9 0xds: or dst, [addr]
		0xda 0xds: or dst, [addr + imm16]
	
	xor:
		0xdb 0xd0: xor dst, [imm16]
		0xdc 0xds: xor dst, [addr]
		0xdd 0xds: xor dst, [addr + imm16]

	shl:
		0xde 0xd0: shl dst, [imm16]
		0xdf 0xds: shl dst, [addr]
		0xe0 0xds: shl dst, [addr + imm16]

	shr:
		0xee 0xd0: shr dst, [imm16]
		0xe1 0xds: shr dst, [addr]
		0xe2 0xds: shr dst, [addr + imm16]

	
















	0x01: mov accl, immm8
		0x5401 0x0004 0x0301 0x0110

	mov accl, byte [base]
		0x5801 0x0004 0x0301

	mov accl, byte [sp]
		0x5901 0x0004 0x0301

	mov accl, byte [bp]
		0x5a01 0x0004 0x0301

	mov accl, byte [base + imm16]
		0x5401 0x0104 0x7801 0x0305 0x5701 0x0004 0x0301 0x0210

	mov accl, byte [sp + imm16]
		0x5401 0x0104 0x7901 0x0305 0x5701 0x0004 0x0301 0x0210

	mov accl, byte [bp + imm16]
		0x5401 0x0104 0x7a01 0x0305 0x5701 0x0004 0x0301 0x0210


	mov acch, immm8
		0x5401 0x0004 0x1301 0x0110

	mov acch, byte [base]
		0x5801 0x0004 0x1301

	mov acch, byte [sp]
		0x5901 0x0004 0x1301

	mov acch, byte [bp]
		0x5a01 0x0004 0x1301

	mov acch, byte [base + imm16]
		0x5401 0x0104 0x7801 0x0305 0x5701 0x0004 0x1301 0x0210

	mov acch, byte [sp + imm16]
		0x5401 0x0104 0x7901 0x0305 0x5701 0x0004 0x1301 0x0210

	mov acch, byte [bp + imm16]
		0x5401 0x0104 0x7a01 0x0305 0x5701 0x0004 0x1301 0x0210


	mov acc, imm16
		0x5401 0x0104 0x2301 0x0210
	
	mov acc, word [base]
		0x5801 0x0104 0x2301

	mov acc, word [sp]
		0x5901 0x0104 0x2301

	mov acc, word [bp]
		0x5a01 0x0104 0x2301
	
	mov acc, word [base + imm16]
		0x5401 0x0104 0x2301 0x0210

	mov acc, word [sp + imm16]
		0x5401 0x0104 0x2301 0x0210

	mov acc, word [bp + imm16]
		0x5401 0x0104 0x2301 0x0210




	mov base, imm16
		0x5401 0x0104 0x8301 0x0210

	mov base, word [base]
		0x5801 0x0104 0x8301

	mov base, word [base + imm16]
		0x5401 0x0104 0x7801 0x0305 0x5701 0x0104 0x8301 0x0210

	



	0x02: mov acch, immm8
		0x5411 0x0034 0x1311 0x0010

	0x03: mov acc, imm16
		0x5401 0x0104 0x2301 0x4501 0x0010

	0x04: jmp imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x4311



	0x05: add accl, imm8
		0x7011 0x5411 0x0034 0x0315 0x0711 0x0010

	0x06: add accl, imm8
		0x7111 0x5411 0x0034 0x0315 0x0711 0x0010

	0x07: add acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711


	TODO:
	0x08: sub accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711
	TODO:
	0x09: sub accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711
	TODO:
	0x0a: sub acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711


	TODO:
	0x0b: mul accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711

	TODO:
	0x0c: mul accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711

	TODO:
	0x0d: mul acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711


	TODO:	
	0x0e: div accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711

	TODO:
	0x0f: div accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711

	TODO:
	0x10: div acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711

	
	TODO:
	0x11: neg accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x0711

	TODO:
	0x12: neg accl, imm8
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x1711

	TODO:
	0x13: neg acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x0315 0x2711

	
	0x14: cmp accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	0x15: cmp acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	0x16: cmp acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x17: and accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x18: and acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x19: and acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x1a: or accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x1b: or acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x1c: or acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x1d: xor accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x1e: xor acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010	

	TODO:
	0x1f: xor acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010

	
	TODO:
	0x20: not accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x21: not acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x22: not acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x23: shl accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x24: shl acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x25: shl acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010


	TODO:
	0x26: shr accl, imm8
		0x7011 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x27: shr acch, imm8
		0x7111 0x5411 0x0034 0x4315 0x7711 0x0010

	TODO:
	0x28: shr acc, imm16
		0x7211 0x5411 0x0034 0x0010 0x5411 0x0134 0x4315 0x7711 0x0010
	

	0x29: jmp imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x4311

	0x2a: jz/je imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x0010 0x0106 0x4311

	0x2b: jg imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x0010 0x0006 0x4311

	0x2c: jge imm16
		0x5411 0x0034 0x0010 0x5411 0x0134 0x0010 0x0006 0x4311
	
	0x2d: jb/jn



	accumulator: 132 instructions